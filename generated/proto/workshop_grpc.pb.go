// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.0
// source: workshop.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WorkshopService_HitungLuasPersegi_FullMethodName     = "/proto.WorkshopService/HitungLuasPersegi"
	WorkshopService_HitungVolumeKubus_FullMethodName     = "/proto.WorkshopService/HitungVolumeKubus"
	WorkshopService_HitungKelilingPersegi_FullMethodName = "/proto.WorkshopService/HitungKelilingPersegi"
	WorkshopService_HitungLingkaran_FullMethodName       = "/proto.WorkshopService/HitungLingkaran"
	WorkshopService_HitungSegitiga_FullMethodName        = "/proto.WorkshopService/HitungSegitiga"
	WorkshopService_HitungUmur_FullMethodName            = "/proto.WorkshopService/HitungUmur"
)

// WorkshopServiceClient is the client API for WorkshopService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkshopServiceClient interface {
	HitungLuasPersegi(ctx context.Context, in *RequestHitungLuasPersegi, opts ...grpc.CallOption) (*ResponseGlobal, error)
	HitungVolumeKubus(ctx context.Context, in *RequestGlobal, opts ...grpc.CallOption) (*ResponseGlobal, error)
	HitungKelilingPersegi(ctx context.Context, in *RequestGlobal, opts ...grpc.CallOption) (*ResponseGlobal, error)
	HitungLingkaran(ctx context.Context, in *RequestLingkaran, opts ...grpc.CallOption) (*ResponseLingkaran, error)
	HitungSegitiga(ctx context.Context, in *RequestSegitiga, opts ...grpc.CallOption) (*ResponseSegitiga, error)
	HitungUmur(ctx context.Context, in *RequestUmur, opts ...grpc.CallOption) (*ResponseGlobal, error)
}

type workshopServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkshopServiceClient(cc grpc.ClientConnInterface) WorkshopServiceClient {
	return &workshopServiceClient{cc}
}

func (c *workshopServiceClient) HitungLuasPersegi(ctx context.Context, in *RequestHitungLuasPersegi, opts ...grpc.CallOption) (*ResponseGlobal, error) {
	out := new(ResponseGlobal)
	err := c.cc.Invoke(ctx, WorkshopService_HitungLuasPersegi_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workshopServiceClient) HitungVolumeKubus(ctx context.Context, in *RequestGlobal, opts ...grpc.CallOption) (*ResponseGlobal, error) {
	out := new(ResponseGlobal)
	err := c.cc.Invoke(ctx, WorkshopService_HitungVolumeKubus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workshopServiceClient) HitungKelilingPersegi(ctx context.Context, in *RequestGlobal, opts ...grpc.CallOption) (*ResponseGlobal, error) {
	out := new(ResponseGlobal)
	err := c.cc.Invoke(ctx, WorkshopService_HitungKelilingPersegi_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workshopServiceClient) HitungLingkaran(ctx context.Context, in *RequestLingkaran, opts ...grpc.CallOption) (*ResponseLingkaran, error) {
	out := new(ResponseLingkaran)
	err := c.cc.Invoke(ctx, WorkshopService_HitungLingkaran_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workshopServiceClient) HitungSegitiga(ctx context.Context, in *RequestSegitiga, opts ...grpc.CallOption) (*ResponseSegitiga, error) {
	out := new(ResponseSegitiga)
	err := c.cc.Invoke(ctx, WorkshopService_HitungSegitiga_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workshopServiceClient) HitungUmur(ctx context.Context, in *RequestUmur, opts ...grpc.CallOption) (*ResponseGlobal, error) {
	out := new(ResponseGlobal)
	err := c.cc.Invoke(ctx, WorkshopService_HitungUmur_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkshopServiceServer is the server API for WorkshopService service.
// All implementations should embed UnimplementedWorkshopServiceServer
// for forward compatibility
type WorkshopServiceServer interface {
	HitungLuasPersegi(context.Context, *RequestHitungLuasPersegi) (*ResponseGlobal, error)
	HitungVolumeKubus(context.Context, *RequestGlobal) (*ResponseGlobal, error)
	HitungKelilingPersegi(context.Context, *RequestGlobal) (*ResponseGlobal, error)
	HitungLingkaran(context.Context, *RequestLingkaran) (*ResponseLingkaran, error)
	HitungSegitiga(context.Context, *RequestSegitiga) (*ResponseSegitiga, error)
	HitungUmur(context.Context, *RequestUmur) (*ResponseGlobal, error)
}

// UnimplementedWorkshopServiceServer should be embedded to have forward compatible implementations.
type UnimplementedWorkshopServiceServer struct {
}

func (UnimplementedWorkshopServiceServer) HitungLuasPersegi(context.Context, *RequestHitungLuasPersegi) (*ResponseGlobal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HitungLuasPersegi not implemented")
}
func (UnimplementedWorkshopServiceServer) HitungVolumeKubus(context.Context, *RequestGlobal) (*ResponseGlobal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HitungVolumeKubus not implemented")
}
func (UnimplementedWorkshopServiceServer) HitungKelilingPersegi(context.Context, *RequestGlobal) (*ResponseGlobal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HitungKelilingPersegi not implemented")
}
func (UnimplementedWorkshopServiceServer) HitungLingkaran(context.Context, *RequestLingkaran) (*ResponseLingkaran, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HitungLingkaran not implemented")
}
func (UnimplementedWorkshopServiceServer) HitungSegitiga(context.Context, *RequestSegitiga) (*ResponseSegitiga, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HitungSegitiga not implemented")
}
func (UnimplementedWorkshopServiceServer) HitungUmur(context.Context, *RequestUmur) (*ResponseGlobal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HitungUmur not implemented")
}

// UnsafeWorkshopServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkshopServiceServer will
// result in compilation errors.
type UnsafeWorkshopServiceServer interface {
	mustEmbedUnimplementedWorkshopServiceServer()
}

func RegisterWorkshopServiceServer(s grpc.ServiceRegistrar, srv WorkshopServiceServer) {
	s.RegisterService(&WorkshopService_ServiceDesc, srv)
}

func _WorkshopService_HitungLuasPersegi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestHitungLuasPersegi)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkshopServiceServer).HitungLuasPersegi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkshopService_HitungLuasPersegi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkshopServiceServer).HitungLuasPersegi(ctx, req.(*RequestHitungLuasPersegi))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkshopService_HitungVolumeKubus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGlobal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkshopServiceServer).HitungVolumeKubus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkshopService_HitungVolumeKubus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkshopServiceServer).HitungVolumeKubus(ctx, req.(*RequestGlobal))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkshopService_HitungKelilingPersegi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGlobal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkshopServiceServer).HitungKelilingPersegi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkshopService_HitungKelilingPersegi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkshopServiceServer).HitungKelilingPersegi(ctx, req.(*RequestGlobal))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkshopService_HitungLingkaran_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestLingkaran)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkshopServiceServer).HitungLingkaran(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkshopService_HitungLingkaran_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkshopServiceServer).HitungLingkaran(ctx, req.(*RequestLingkaran))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkshopService_HitungSegitiga_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSegitiga)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkshopServiceServer).HitungSegitiga(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkshopService_HitungSegitiga_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkshopServiceServer).HitungSegitiga(ctx, req.(*RequestSegitiga))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkshopService_HitungUmur_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUmur)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkshopServiceServer).HitungUmur(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkshopService_HitungUmur_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkshopServiceServer).HitungUmur(ctx, req.(*RequestUmur))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkshopService_ServiceDesc is the grpc.ServiceDesc for WorkshopService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkshopService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.WorkshopService",
	HandlerType: (*WorkshopServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HitungLuasPersegi",
			Handler:    _WorkshopService_HitungLuasPersegi_Handler,
		},
		{
			MethodName: "HitungVolumeKubus",
			Handler:    _WorkshopService_HitungVolumeKubus_Handler,
		},
		{
			MethodName: "HitungKelilingPersegi",
			Handler:    _WorkshopService_HitungKelilingPersegi_Handler,
		},
		{
			MethodName: "HitungLingkaran",
			Handler:    _WorkshopService_HitungLingkaran_Handler,
		},
		{
			MethodName: "HitungSegitiga",
			Handler:    _WorkshopService_HitungSegitiga_Handler,
		},
		{
			MethodName: "HitungUmur",
			Handler:    _WorkshopService_HitungUmur_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "workshop.proto",
}
